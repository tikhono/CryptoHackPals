#[cfg(test)]
mod tests {
    use num::bigint::BigInt;
    use openssl::symm::{decrypt, encrypt, Cipher};
    use sha1::{Digest, Sha1};

    const BLOCK_SIZE: usize = 16;

    #[test]
    fn capture_the_flag() {
        let iv: Vec<u8> = hex::decode("737561146ff8194f45290f5766ed6aba").unwrap();

        let flag = hex::decode("39c99bf2f0c14678d6a5416faef954b5893c316fc3c48622ba1fd6a9fe85f3dc72a29c394cf4bc8aff6a7b21cae8e12c").unwrap();

        let a = BigInt::parse_bytes(b"112218739139542908880564359534373424013016249772931962692237907571990334483528877513809272625610512061159061737608547288558662879685086684299624481742865016924065000555267977830144740364467977206555914781236397216033805882207640219686011643468275165718132888489024688846101943642459655423609111976363316080620471928236879737944217503462265615774774318986375878440978819238346077908864116156831874695817477772477121232820827728424890845769152726027520772901423784", 10).unwrap();
        let b = BigInt::parse_bytes(b"197395083814907028991785772714920885908249341925650951555219049411298436217190605190824934787336279228785809783531814507661385111220639329358048196339626065676869119737979175531770768861808581110311903548567424039264485661330995221907803300824165469977099494284722831845653985392791480264712091293580274947132480402319812110462641143884577706335859190668240694680261160210609506891842793868297672619625924001403035676872189455767944077542198064499486164431451944", 10).unwrap();
        let p = BigInt::parse_bytes(b"2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919", 10).unwrap();

        let shared_secret = a.modpow(&b, &p);

        let mut hasher = Sha1::new();
        hasher.update(&shared_secret.to_str_radix(10));
        let key = hasher.finalize().to_vec();
        let key = key.get(0..BLOCK_SIZE).unwrap();

        let cipher = Cipher::aes_128_cbc();
        let plaintext = decrypt(cipher, key, Some(&iv), &flag).unwrap();
        let plaintext = String::from_utf8_lossy(&plaintext);

        println!("{}", plaintext);
    }
}
